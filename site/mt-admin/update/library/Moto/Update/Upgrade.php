<?php
namespace Moto\Update; use Moto; use Zend; class Upgrade extends Moto\Update\AbstractClass { const BUILD = 69; const VERSION = '3.2.0'; public static function saveCurrentBuild() { Moto\System\Settings::set('build', self::BUILD); Moto\System\Settings::set('version', self::VERSION); return true; } public static function execute() { try { return static::_execute(); } catch (\Exception $e) { if ($e->getMessage() == 'CANT_UPGRADE') { $trace = $e->getTrace(); for($i = 0, $len = min(3, count($trace)); $i < $len; $i++) { if (!empty($trace[$i]['function']) && preg_match('/updateTo_([0-9]+)_Build/', $trace[$i]['function'], $match)) { static::addError('CANT_UPGRADE', $match[1]); break; } } } else { static::addError('CANT_UPGRADE'); } throw $e; } return false; } protected static function _execute() { self::$_currentBuild = Moto\Version::getCurrentBuild(true); if (self::BUILD <= self::$_currentBuild) { return true; } if (self::$_currentBuild < 3) { self::updateTo_3_Build(); } if (self::$_currentBuild < 4) { self::updateTo_4_Build(); } if (self::$_currentBuild < 5) { self::updateTo_5_Build(); } if (self::$_currentBuild < 6) { self::updateTo_6_Build(); } if (self::$_currentBuild < 7) { self::_runSqlFile(7); } if (self::$_currentBuild < 8) { self::_runSqlFile(8); } if (self::$_currentBuild < 9) { self::updateTo_9_Build(); } if (self::$_currentBuild < 10) { Moto\Website\Theme::activate(Moto\Website\Settings::get('theme', 'engine')); } if (self::$_currentBuild < 11) { self::updateTo_11_Build(); } if (self::$_currentBuild < 12) { Moto\Website\Settings::add('google_analytics_id', ''); Moto\Website\Settings::add('google_webmaster_tools_tag', ''); } if (self::$_currentBuild < 13) { self::updateTo_13_Build(); } if (self::$_currentBuild < 14) { self::updateTo_14_Build(); } if (self::$_currentBuild < 15) { self::updateTo_15_Build(); } if (self::$_currentBuild < 16) { self::updateTo_16_Build(); } if (self::$_currentBuild < 17) { self::updateTo_17_Build('sections'); self::updateTo_17_Build('pages'); } if (self::$_currentBuild < 18) { self::updateTo_18_Build(); } if (self::$_currentBuild < 19) { self::updateTo_19_Build(); } if (self::$_currentBuild < 20) { self::updateTo_20_Build(); } if (self::$_currentBuild < 23) { self::updateTo_23_Build(); } if (self::$_currentBuild < 24) { self::updateTo_24_Build(); } if (self::$_currentBuild < 25) { self::updateTo_25_Build(); } if (self::$_currentBuild < 26) { self::updateTo_26_Build(); } if (self::$_currentBuild < 27) { self::updateTo_27_Build(); } if (self::$_currentBuild < 30) { self::updateTo_30_Build(); } if (self::$_currentBuild < 31) { self::updateTo_31_Build(); } if (self::$_currentBuild < 34) { self::updateTo_34_Build(); } if (self::$_currentBuild < 37) { self::updateTo_37_Build(); } if (self::$_currentBuild < 38) { self::updateTo_38_Build(); } if (self::$_currentBuild < 39) { self::updateTo_39_Build(); } if (self::$_currentBuild < 40) { self::updateTo_40_Build(); } if (self::$_currentBuild < 42) { self::updateTo_42_Build(); } if (self::$_currentBuild < 43) { self::updateTo_43_Build(); } if (self::$_currentBuild < 44) { self::updateTo_44_Build(); } if (self::$_currentBuild < 45) { self::updateTo_45_Build(); } if (self::$_currentBuild < 46) { self::updateTo_46_Build(); } if (self::$_currentBuild < 47) { self::updateTo_47_Build(); } if (self::$_currentBuild < 48) { self::updateTo_48_Build(); } if (self::$_currentBuild < 49) { self::updateTo_49_Build(); } if (self::$_currentBuild < 50) { self::updateTo_50_Build(); } if (self::$_currentBuild < 52) { self::updateTo_52_Build(); } if (self::$_currentBuild < 57) { self::updateTo_57_Build(); } if (self::$_currentBuild < 59) { self::updateTo_59_Build(); } if (self::$_currentBuild < 60) { self::updateTo_60_Build(); } if (self::$_currentBuild < 61) { self::updateTo_61_Build(); } if (self::$_currentBuild < 62) { self::updateTo_62_Build(); } if (self::$_currentBuild < 63) { self::updateTo_63_Build(); } if (self::$_currentBuild < 64) { self::updateTo_64_Build(); } if (self::$_currentBuild < 65) { self::updateTo_65_Build(); } if (self::$_currentBuild < 66) { self::updateTo_66_Build(); } if (self::$_currentBuild < 68) { self::updateTo_68_Build(); } return true; } protected static function _runSqlFile($build) { $prefix = Moto\Config::get('database.prefix'); $databaseAdapter = Moto\Config::get('databaseAdapter'); try { $parser = new Moto\Sql\Parser(); $parser->setTablePrefix($prefix); $queries = $parser->parseFile(Moto\System::getAbsolutePath('@systemUpdate/sql/' . $build . '.sql')); foreach ($queries as $query) { $query && $query['sql'] && $databaseAdapter->query($query['sql'])->execute(); } } catch (\Exception $e) { static::addError('CANT_EXECUTE_SQL_FILE', $build); throw new \Exception('CANT_UPGRADE'); } } protected static function _getTablePrefix() { return Moto\Config::get('database.prefix'); } protected static function _getDatabaseAdapter() { return Moto\Config::get('databaseAdapter'); } protected static function updateTo_3_Build() { $result = true; try { $oldDir = Moto\Config::get('rootPath') . '/uploads/'; if (!is_dir($oldDir)) { return true; } $uploadsDir = Moto\System::getAbsolutePath('@userUploads'); $options = array( 'compareFunction' => function ($dir, $file) { return ($file !== '.gitignore'); } ); $files = Moto\Util::scanDir($oldDir, '', $options); $result = Moto\Util::moveFiles($files, $oldDir, $uploadsDir); } catch (\Exception $e) { throw new \Exception('CANT_UPGRADE'); } return $result; } protected static function updateTo_4_Build() { $result = true; try { $prefix = Moto\Config::get('database.prefix'); $databaseAdapter = Moto\Config::get('databaseAdapter'); $table = new Moto\Application\Styles\StylesTable(); $table->useResultAsModel(false); $items = $table->select(array( 'is_system' => 1, 'type' => 'text' )); foreach ($items as $item) { if (!preg_match('/^moto-text_/', $item->class_name)) { $item->class_name = strtolower($item->name); $item->class_name = 'moto-text_' . str_replace(' ', '_', $item->class_name); $table->save($item); } if ($item->class_name === 'moto-text_normal') { $item->properties = '{"desktop":{"base":{"font-family":"Arial","font-size":"12px","color":"#000000","line-height":"1.2","letter-spacing":"0px"}}}'; $table->save($item); } } $sql = "UPDATE `{$prefix}styles` SET `tag` = '' WHERE `type` IN ('text', 'background')"; $result = $databaseAdapter->query($sql)->execute(); } catch (\Exception $e) { throw new \Exception('CANT_UPGRADE'); } return $result; } protected static function updateTo_5_Build() { $result = true; try { $prefix = Moto\Config::get('database.prefix'); $databaseAdapter = Moto\Config::get('databaseAdapter'); $sql = "SHOW COLUMNS FROM `{$prefix}styles` WHERE `Field` = 'link'"; $isExists = $databaseAdapter->query($sql)->execute()->current(); if (!$isExists) { $sql = "ALTER IGNORE TABLE `{$prefix}styles` ADD `link` TEXT NOT NULL AFTER `properties`"; $result = $databaseAdapter->query($sql)->execute(); } $sql = 'UPDATE `' . $prefix . 'styles` SET `link` = \'{"desktop":{"base":{"color":"#1e0fbe"},"hover":{"color":"#1e0fbe","text-decoration":"underline"}}}\' WHERE `type` IN ("text") AND `link` = ""'; $result = $databaseAdapter->query($sql)->execute(); } catch (\Exception $e) { throw new \Exception('CANT_UPGRADE'); } return $result; } protected static function updateTo_6_Build() { $result = true; try { $table = new Moto\Application\Styles\StylesTable(); $table->useResultAsModel(false); $items = $table->select(array( 'type' => 'text' )); $defaultValue = array( 'desktop' => array( 'base' => array( 'font-weight' => null, 'font-style' => null, 'color' => '#000000', 'font-family' => 'Arial', 'font-size' => '12px', 'line-height' => '1.2', 'letter-spacing' => '0px', ) ) ); foreach ($items as $item) { if (is_string($item->properties)) { $item->properties = json_decode($item->properties, true); } elseif (!is_array($item->properties)) { $item->properties = json_decode(json_encode($item->properties), true); } if (is_string($item->link)) { $item->link = json_decode($item->link, true); } elseif (!is_array($item->link)) { $item->link = json_decode(json_encode($item->link), true); } $link = $item->link; $properties = array(); foreach ($defaultValue['desktop']['base'] as $key => $value) { if (!empty($item->properties['desktop']['base'][$key])) { $value = $item->properties['desktop']['base'][$key]; } if (in_array($key, array('font-weight', 'font-style')) && $value == 'normal') { $value = null; } if (empty($value)) { continue; } $properties['desktop']['base'][$key] = $value; if (in_array($key, array('font-weight', 'font-style'))) { $link['desktop']['base'][$key] = $value; $link['desktop']['hover'][$key] = $value; } } $item->properties = json_encode($properties); $item->link = json_encode($link); $table->save($item); } } catch (\Exception $e) { throw new \Exception('CANT_UPGRADE'); } return $result; } protected static function updateTo_9_Build() { try { $prefix = Moto\Config::get('database.prefix'); $databaseAdapter = Moto\Config::get('databaseAdapter'); $sql = "SHOW INDEX FROM `{$prefix}styles` WHERE Key_name = 'class_name';"; $uniqueIndex = $databaseAdapter->query($sql)->execute()->current(); if (!($uniqueIndex && $uniqueIndex['Non_unique'] == 0)) { $sql = "ALTER IGNORE TABLE `{$prefix}styles` ADD UNIQUE (`class_name`);"; $result = $databaseAdapter->query($sql)->execute(); } } catch (\Exception $e) { throw new \Exception('CANT_UPGRADE'); } self::_runSqlFile(8); } protected static function updateTo_11_Build() { try { $prefix = self::_getTablePrefix(); $databaseAdapter = self::_getDatabaseAdapter(); $sql = 'UPDATE `' . $prefix . 'styles` SET `is_system`=1 WHERE `class_name` IN ("moto-background", "moto-background_1", "moto-background_2", "moto-text_normal") OR `class_name` LIKE "moto-text_system_%"'; $databaseAdapter->query($sql)->execute(); } catch (\Exception $e) { throw new \Exception('CANT_UPGRADE'); } } protected static function updateTo_13_Build() { try { $prefix = Moto\Config::get('database.prefix'); $databaseAdapter = Moto\Config::get('databaseAdapter'); $sql = "SHOW COLUMNS FROM `{$prefix}pages` WHERE `Field` = 'is_system'"; $isExists = $databaseAdapter->query($sql)->execute()->current(); if (!$isExists) { $sql = "ALTER TABLE `{$prefix}pages` ADD `is_system` TINYINT( 1 ) UNSIGNED NOT NULL DEFAULT '0' AFTER `parent_id`"; $databaseAdapter->query($sql)->execute(); } $pageTable = new Moto\Application\Pages\PagesTable(); $page = $pageTable->getByUrl('404'); if (!$page) { $page = Moto\Application\Pages\Service::save(array( 'name' => '404', 'url' => '404', )); } $page->is_system = 1; $page->status = Moto\Application\Pages\PageModel::STATUS_PUBLISH; $pageTable->save($page); Moto\Website\Settings::add('notfound_page_id', $page->id); } catch (\Exception $e) { throw new \Exception('CANT_UPGRADE'); } return true; } protected static function updateTo_14_Build() { try { $prefix = Moto\Config::get('database.prefix'); $databaseAdapter = Moto\Config::get('databaseAdapter'); $sql = "SHOW COLUMNS FROM `{$prefix}menus` WHERE `Field` = 'is_system'"; $isExists = $databaseAdapter->query($sql)->execute()->current(); if (!$isExists) { $sql = "ALTER TABLE `{$prefix}menus` ADD `is_system` TINYINT( 1 ) UNSIGNED NOT NULL DEFAULT '0' AFTER `name`"; $databaseAdapter->query($sql)->execute(); } $sql = "UPDATE `{$prefix}menus` SET `is_system` = 1 WHERE `id` = 1 OR `name` = 'Main Menu' LIMIT 1"; $databaseAdapter->query($sql)->execute(); } catch (\Exception $e) { throw new \Exception('CANT_UPGRADE'); } return true; } protected static function updateTo_15_Build() { try { $table = new Moto\Application\Menus\MenuItemsTable(); $table->useResultAsModel(false); $items = $table->select(); foreach ($items as $item) { if (empty($item->properties)) { continue; } if (is_string($item->properties)) { $item->properties = json_decode($item->properties, true); } elseif (!is_array($item->properties)) { $item->properties = json_decode(json_encode($item->properties), true); } if (!empty($item->properties['target']) && $item->properties['target'] == 'self') { $item->properties['target'] = '_self'; $item->properties = json_encode($item->properties); $table->save($item); } } } catch (\Exception $e) { throw new \Exception('CANT_UPGRADE'); } return true; } protected static function updateTo_16_Build() { try { $table = new Moto\Application\Content\Table\ContentBlocks(); $table->useResultAsModel(false); $items = $table->select(); foreach ($items as $item) { if (!empty($item->content)) { $content = $item->content; $item->content = str_replace('col-xs-', 'col-sm-', $item->content); if ($content !== $item->content) { $table->save($item); } } } $table = new Moto\Application\Pages\PagesTable(); $table->useResultAsModel(false); $items = $table->select(); foreach ($items as $item) { if (!empty($item->content)) { $content = $item->content; $item->content = str_replace('col-xs-', 'col-sm-', $item->content); if ($content !== $item->content) { $table->save($item); } } } $table = new Moto\Application\Styles\StylesTable(); $table->useResultAsModel(false); $items = $table->select(); foreach ($items as $item) { $isChanged = false; if (!empty($item->properties)) { $content = $item->properties; $item->properties = str_replace('"text-decoration":""', '"text-decoration":"none"', $item->properties); $isChanged = ($content !== $item->properties); } if (!empty($item->link)) { $content = $item->link; $item->link = str_replace('"text-decoration":""', '"text-decoration":"none"', $item->link); $isChanged = ($content !== $item->link); } if ($isChanged) { $table->save($item); } } } catch (\Exception $e) { throw new \Exception('CANT_UPGRADE'); } return true; } protected static function updateTo_17_Build($table) { try { $containersMap = array(); $holdersMap = array(); $duplicates = array(); if ($table == 'sections') { $contentTable = new Moto\Application\Content\Table\ContentBlocks(); } elseif ($table == 'pages') { $contentTable = new Moto\Application\Pages\PagesTable(); } else { Moto\System\Log::notice('@UPDATE 17 : not allowed table "' . $table . '"'); return; } $contentTable->useResultAsModel(false); $items = $contentTable->select(); foreach ($items as $item) { if (!empty($item->content)) { $containers = Moto\Application\Content\Util::findContainers($item->content); foreach ($containers as $container) { if (!isset($containersMap[$container])) { $containersMap[$container] = array( 'holders' => array() ); } else { $duplicates[$container] = count($containersMap[$container]['holders']); $holdersMap[$item->id] = $item; } $containersMap[$container]['holders'][] = $item->id; } } } if (!empty($duplicates)) { $styleTable = new Moto\Application\Styles\StylesTable(); $styleTable->useResultAsModel(true); Moto\System\Log::notice('@UPDATE 17 : found duplicates in "' . $table . '" | ', $duplicates); foreach ($duplicates as $duplicate => $count) { $holders = $containersMap[$duplicate]['holders']; $mainHolderId = array_shift($holders); foreach ($holders as $holderId) { $holder = $holdersMap[$holderId]; if ($table == 'pages') { $newClassName = 'moto-container_content_' . Moto\Util::getUniqueId(); } else { $newClassName = 'moto-container_' . $holder->type . '_' . Moto\Util::getUniqueId(); } $style = $styleTable->getByClassName($duplicate); if ($style) { $newStyle = $styleTable->duplicate($style); $newStyle->name = $newStyle->class_name = $newClassName; } $holder->content = str_replace($duplicate, $newClassName, $holder->content); Moto\System\Log::notice('@UPDATE 17 : change "' . $duplicate . '" to "' . $newClassName . '" id: ' . $holder->id); $contentTable->save($holder); if ($style) { $styleTable->save($newStyle); Moto\System\Log::notice('@UPDATE 17 : save new style "' . $newStyle->class_name . '"'); } } } } } catch (\Exception $e) { throw new \Exception('CANT_UPGRADE'); } return true; } public static function updateTo_18_Build() { try { $table = new Moto\Application\Pages\PagesTable(); $table->useResultAsModel(false); $items = $table->select(array( 'is_system' => 1, )); foreach($items as $item) { if ($item->url == '404') { continue; } $item->is_system = 0; $table->save($item); Moto\System\Log::notice('@UPDATE 18 : disable is_system for page "' . $item->name . '" id: ' . $item->id ); } $table = new Moto\Application\Menus\MenusTable(); $table->useResultAsModel(false); $items = $table->select(array( 'is_system' => 1, )); foreach($items as $item) { if ($item->id == 1) { continue; } $item->is_system = 0; $table->save($item); Moto\System\Log::notice('@UPDATE 18 : disable is_system for menu "' . $item->name . '" id: ' . $item->id ); } } catch (\Exception $e) { throw new \Exception('CANT_UPGRADE'); } return true; } protected static function updateTo_19_Build() { try { $prefix = Moto\Config::get('database.prefix'); $databaseAdapter = Moto\Config::get('databaseAdapter'); $sql = "SHOW COLUMNS FROM `{$prefix}styles` WHERE `Field` = 'is_responsive'"; $isExists = $databaseAdapter->query($sql)->execute()->current(); if (!$isExists) { $sql = "ALTER TABLE `{$prefix}styles` ADD `is_responsive` TINYINT( 1 ) UNSIGNED NOT NULL DEFAULT '0' AFTER `is_system`"; $databaseAdapter->query($sql)->execute(); } } catch (\Exception $e) { throw new \Exception('CANT_UPGRADE'); } return true; } protected static function updateTo_20_Build() { try { Moto\Website\Settings::add('spacings', '{"desktop":{"small":10,"medium":20,"large":30},"tablet":{"small":10,"medium":20,"large":30},"mobile-h":{"small":10,"medium":20,"large":30},"mobile-v":{"small":10,"medium":20,"large":30}}'); $theme = Moto\Website\Settings::get('theme'); if ($theme) { Moto\Website\Theme::importSpacings($theme); } Moto\Features::disableByMask('theme'); $features = Moto\Website\Theme::getFeatures(); Moto\Features::enable($features); } catch (\Exception $e) { throw new \Exception('CANT_UPGRADE'); } return true; } protected static function updateTo_23_Build() { try { Moto\Website\Settings::add('favicon', ''); $settings = array( 'enabled' => true, 'topOffset' => 300, 'animationTime' => 500 ); Moto\Website\Settings::add('back_to_top_button', json_encode($settings)); } catch (\Exception $e) { throw new \Exception('CANT_UPGRADE'); } return true; } protected static function updateTo_24_Build() { self::_runSqlFile(24); return true; } protected static function updateTo_25_Build() { try { Moto\Website\Settings::add('thumbnails', '[{"name":"s","label":"THUMBNAILS.SMALL","width":125,"height":125,"disabled":false,"type":"resize","options":{"scale":true,"quality":80,"compression":7}},{"name":"m","label":"THUMBNAILS.MEDIUM","width":300,"height":300,"disabled":false,"type":"resize","options":{"scale":true,"quality":80,"compression":7}},{"name":"l","label":"THUMBNAILS.LARGE","width":1200,"height":1200,"disabled":false,"type":"resize","options":{"scale":true,"quality":80,"compression":7}},{"name":"xl","label":"THUMBNAILS.EXTRA_LARGE","width":1980,"height":1980,"disabled":false,"type":"resize","options":{"scale":true,"quality":80,"compression":7}}]'); $prefix = Moto\Config::get('database.prefix'); $databaseAdapter = Moto\Config::get('databaseAdapter'); $sql = "SHOW COLUMNS FROM `{$prefix}media_items` WHERE `Field` = 'thumbnails'"; $isExists = $databaseAdapter->query($sql)->execute()->current(); if (!$isExists) { $sql = "ALTER IGNORE TABLE `{$prefix}media_items` ADD `thumbnails` TEXT CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL AFTER `properties`"; $result = $databaseAdapter->query($sql)->execute(); } $sql = "UPDATE `{$prefix}media_items` SET `thumbnails` = '{}' WHERE `thumbnails` = ''"; $result = $databaseAdapter->query($sql)->execute(); } catch (\Exception $e) { throw new \Exception('CANT_UPGRADE'); } return $result; } protected static function updateTo_26_Build() { $result = false; try { $prefix = Moto\Config::get('database.prefix'); $databaseAdapter = Moto\Config::get('databaseAdapter'); $sql = "SHOW COLUMNS FROM `{$prefix}settings` WHERE `Field` = 'type'"; $isExists = $databaseAdapter->query($sql)->execute()->current(); if (!$isExists) { $sql = "ALTER IGNORE TABLE `{$prefix}settings` ADD `type` ENUM( '', 'int', 'float', 'string', 'bool', 'object', 'array' ) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '';"; $result = $databaseAdapter->query($sql)->execute(); } $sql = 'UPDATE `' . $prefix . 'settings` SET `type` = "array" WHERE `name` IN ("website.colors") AND `type` = ""'; $result = $databaseAdapter->query($sql)->execute(); $plugins = Moto\Website\Settings::get('plugins'); if ($plugins === null) { Moto\Website\Settings::add('plugins', array(), 'array'); } if (is_string($plugins)) { $sql = 'UPDATE `' . $prefix . 'settings` SET `type` = "array" WHERE `name` IN ("website.plugins") AND `type` = ""'; $result = $databaseAdapter->query($sql)->execute(); } Moto\Website\Settings::add('thumbnails', '[{"name":"s","label":"THUMBNAILS.SMALL","width":125,"height":125,"disabled":false,"type":"resize","options":{"scale":true,"quality":80,"compression":7}},{"name":"m","label":"THUMBNAILS.MEDIUM","width":300,"height":300,"disabled":false,"type":"resize","options":{"scale":true,"quality":80,"compression":7}},{"name":"l","label":"THUMBNAILS.LARGE","width":1200,"height":1200,"disabled":false,"type":"resize","options":{"scale":true,"quality":80,"compression":7}},{"name":"xl","label":"THUMBNAILS.EXTRA_LARGE","width":1980,"height":1980,"disabled":false,"type":"resize","options":{"scale":true,"quality":80,"compression":7}}]', 'object'); $sql = 'UPDATE `' . $prefix . 'settings` SET `type` = "object" WHERE `name` IN ("website.thumbnails") AND `type` = ""'; $result = $databaseAdapter->query($sql)->execute(); $result = true; } catch (\Exception $e) { throw new \Exception('CANT_UPGRADE'); } return $result; } protected static function updateTo_27_Build() { $result = false; try { Moto\Website\Settings::add('theme_presets', '{}', 'object'); Moto\Website\Settings::add('widgets', array(), 'array'); $prefix = static::_getTablePrefix(); $databaseAdapter = static::_getDatabaseAdapter(); $sql = 'UPDATE `' . $prefix . 'settings` SET `type` = "object" WHERE `name` IN ("website.theme_presets") AND `type` IN ("", "string")'; $databaseAdapter->query($sql)->execute(); $sql = 'UPDATE `' . $prefix . 'settings` SET `type` = "array" WHERE `name` IN ("website.widgets") AND `type` IN ("", "string")'; $databaseAdapter->query($sql)->execute(); $table = new Moto\Application\Languages\LanguagesTable(); $language = $table->getByCode('de'); if (!$language) { $language = $table->create(array( 'code' => 'de', 'name' => 'Deutsch' )); $table->save($language); } $result = true; } catch (\Exception $e) { throw new \Exception('CANT_UPGRADE'); } return $result; } protected static function updateTo_30_Build() { $result = false; try { $options = array( 'transport' => Moto\Config::get('mail.options.transport') ); Moto\Website\Settings::add('default_mail_options', $options, 'array'); $tempUploads = Moto\System::getAbsolutePath('@tempUploads'); if (empty($tempUploads)) { $tempUploads = Moto\System::getAbsolutePath('@website/mt-content/temp/uploads'); } Moto\Util::createDir($tempUploads); $prefix = static::_getTablePrefix(); $databaseAdapter = static::_getDatabaseAdapter(); $sql = 'UPDATE `' . $prefix . 'settings` SET `type` = "array" WHERE `name` IN ("website.default_mail_options") AND `type` IN ("", "string")'; $databaseAdapter->query($sql)->execute(); $result = true; } catch (\Exception $e) { throw new \Exception('CANT_UPGRADE'); } return $result; } protected static function updateTo_31_Build() { $result = false; try { Moto\Website\Settings::add('integrations', array(), 'array'); $prefix = static::_getTablePrefix(); $databaseAdapter = static::_getDatabaseAdapter(); $sql = 'UPDATE `' . $prefix . 'settings` SET `type` = "array" WHERE `name` IN ("website.integrations") AND `type` IN ("", "string")'; $databaseAdapter->query($sql)->execute(); $result = true; } catch (\Exception $e) { throw new \Exception('CANT_UPGRADE'); } return $result; } protected static function updateTo_34_Build() { try { Moto\System\Log::info('@UPDATE 34 : Start'); $prefix = static::_getTablePrefix(); $databaseAdapter = static::_getDatabaseAdapter(); Moto\System\Log::info('@UPDATE 34 : DataBase : increase pages.type'); try { $sql = "ALTER TABLE `{$prefix}pages` CHANGE `type` `type` VARCHAR( 24 ) NOT NULL DEFAULT 'page'"; $databaseAdapter->query($sql)->execute(); } catch (\Exception $e) { Moto\System\Log::critical('@UPDATE 34 : DataBase : ' . $e->getMessage()); throw $e; } Moto\System\Log::info('@UPDATE 34 : DataBase : add index for pages.type'); try { $sql = "ALTER TABLE `{$prefix}pages` ADD INDEX `page__type` ( `type` )"; $databaseAdapter->query($sql)->execute(); } catch (\Exception $e) { if (preg_match('/Duplicate key name/', $e->getMessage())) { Moto\System\Log::notice('@UPDATE 34 : DataBase : index already exists'); } else { Moto\System\Log::error('@UPDATE 34 : DataBase : ' . $e->getMessage()); } } try { $sql = "SHOW COLUMNS FROM `{$prefix}pages` WHERE `Field` = 'short_description'"; $isExists = $databaseAdapter->query($sql)->execute()->current(); if ($isExists) { Moto\System\Log::notice('@UPDATE 34 : DataBase : field short_description already exists'); } else { Moto\System\Log::info('@UPDATE 34 : DataBase : add field short_description'); $sql = "ALTER TABLE `{$prefix}pages` ADD `short_description` TEXT NOT NULL AFTER `background`"; $databaseAdapter->query($sql)->execute(); } } catch (\Exception $e) { Moto\System\Log::critical('@UPDATE 34 : DataBase : ' . $e->getMessage()); throw $e; } Moto\System\Log::info('@UPDATE 34 : Done'); } catch (\Exception $e) { Moto\System\Log::error('@UPDATE BLOG : Exception : ' . json_encode(array('code' => $e->getCode(), 'message' => $e->getMessage(), 'trace' => $e->getTraceAsString()))); throw new \Exception('CANT_UPGRADE'); } } protected static function updateTo_37_Build() { try { Moto\Website\Settings::add('yandex_metrica_counter_id', ''); Moto\Website\Settings::add('yandex_webmaster_code', ''); Moto\Website\Settings::add('theme_grid', '{"gutter-width":"30px"}', 'array'); $theme = Moto\Website\Settings::get('theme'); if ($theme) { Moto\Features::disableByMask('theme'); Moto\Website\Theme::importFeatures($theme); if (method_exists('Moto\Website\Theme', 'importGridOptions')) { Moto\Website\Theme::importGridOptions($theme); } } } catch (\Exception $e) { throw new \Exception('CANT_UPGRADE'); } return true; } public static function fixUrl_38($url) { $url = trim($url); if (!empty($url) && !in_array($url[0], array('.', '/', '', ':', '#')) && !preg_match('/^([a-z]*:\/\/)/i', $url)) { $url = 'http://' . $url; } return $url; } protected static function updateTo_38_Build($target = null) { if ($target == null) { try { Moto\System\Log::info('@UPDATE 38 : Start'); Moto\Website\Settings::add('title_format', '{{page.title}}'); Moto\System\Log::info('@UPDATE 38 : website.title_format added'); Moto\Website\Settings::add('redirection_rules', '[]', 'array'); Moto\System\Log::info('@UPDATE 38 : website.redirection_rules added'); static::updateTo_38_Build('menu_items'); Moto\System\Log::info('@UPDATE 38 : Menu Items updated'); Moto\System\Log::info('@UPDATE 38 : Done'); } catch (\Exception $e) { Moto\System\Log::error('@UPDATE 38 : Exception : ' . json_encode(array('code' => $e->getCode(), 'message' => $e->getMessage(), 'trace' => $e->getTraceAsString()))); throw new \Exception('CANT_UPGRADE'); } return true; } if ($target == 'menu_items') { $table = new Moto\Application\Menus\MenuItemsTable(); $table->useResultAsModel(false); $items = $table->select(array( 'action' => 'url', )); foreach ($items as $item) { if (empty($item->properties) || $item->action != 'url') { continue; } if (is_string($item->properties)) { $item->properties = json_decode($item->properties, true); } elseif (!is_array($item->properties)) { $item->properties = json_decode(json_encode($item->properties), true); } if (array_key_exists('url', $item->properties) && is_string($item->properties['url'])) { $item->properties['url'] = trim($item->properties['url']); $url = static::fixUrl_38($item->properties['url']); if ($url != $item->properties['url']) { $item->properties['url'] = $url; $item->properties = json_encode($item->properties); $table->save($item); } } } } return true; } protected static function updateTo_39_Build() { Moto\Website\Settings::add('custom_code_execution', 1, 'bool'); Moto\Website\Settings::set('layouts', '[{"name":"default","label":"MODULE.PAGES.LAYOUTS.DEFAULT.LABEL","title":"MODULE.PAGES.LAYOUTS.DEFAULT.TITLE","sections":[{"name":"header","label":"MODULE.PAGES.LAYOUTS.DEFAULT.SECTIONS.HEADER_LABEL","type":"header"},{"name":"footer","label":"MODULE.PAGES.LAYOUTS.DEFAULT.SECTIONS.FOOTER_LABEL","type":"footer"}]},{"name":"sidebars","label":"MODULE.PAGES.LAYOUTS.SIDEBARS.LABEL","title":"MODULE.PAGES.LAYOUTS.SIDEBARS.TITLE","sections":[{"name":"header","label":"MODULE.PAGES.LAYOUTS.SIDEBARS.SECTIONS.HEADER_LABEL","type":"header"},{"name":"footer","label":"MODULE.PAGES.LAYOUTS.SIDEBARS.SECTIONS.FOOTER_LABEL","type":"footer"},{"name":"sidebar_left","label":"MODULE.PAGES.LAYOUTS.SIDEBARS.SECTIONS.SIDEBAR_LEFT_LABEL","type":"sidebar","properties":{"size":{"default":3,"min":1,"max":12}}},{"name":"sidebar_right","label":"MODULE.PAGES.LAYOUTS.SIDEBARS.SECTIONS.SIDEBAR_RIGHT_LABEL","type":"sidebar","properties":{"size":{"default":3,"min":1,"max":12}}}]}]'); Moto\Website\Settings::set('thumbnails', '[{"name":"s","label":"MODULE.MEDIA_LIBRARY.THUMBNAILS.SMALL_LABEL","width":125,"height":125,"disabled":false,"type":"resize","options":{"scale":true,"quality":80,"compression":7}},{"name":"m","label":"MODULE.MEDIA_LIBRARY.THUMBNAILS.MEDIUM_LABEL","width":300,"height":300,"disabled":false,"type":"resize","options":{"scale":true,"quality":80,"compression":7}},{"name":"l","label":"MODULE.MEDIA_LIBRARY.THUMBNAILS.LARGE_LABEL","width":1200,"height":1200,"disabled":false,"type":"resize","options":{"scale":true,"quality":80,"compression":7}},{"name":"xl","label":"MODULE.MEDIA_LIBRARY.THUMBNAILS.EXTRA_LARGE_LABEL","width":1980,"height":1980,"disabled":false,"type":"resize","options":{"scale":true,"quality":80,"compression":7}}]'); try { $prefix = self::_getTablePrefix(); $databaseAdapter = self::_getDatabaseAdapter(); $sql = 'UPDATE `' . $prefix . 'settings` SET `type` = "bool" WHERE `name` IN ("website.custom_code_execution")'; $databaseAdapter->query($sql)->execute(); } catch (\Exception $e) { throw new \Exception('CANT_UPGRADE'); } } protected static function updateTo_40_Build() { Moto\System\Log::info('@UPDATE 40 : Start'); Moto\System\Log::info('@UPDATE 40 : Preset Name updating...'); $table = new Moto\Application\Presets\PresetsTable(); $table->useResultAsModel(false); $items = $table->select(array( 'is_system' => true, )); foreach ($items as $item) { $item->class_name = trim($item->class_name); if (preg_match('/^moto-preset-(.+)$/', $item->class_name, $match)) { $name = trim($match[1]); if ($name == 'default') { $name = '1'; } $name = 'Preset ' . $name; $item->name = $name; $table->save($item); } } Moto\System\Log::info('@UPDATE 40 : Preset Name updated'); Moto\Website\Settings::loadData(true); $prefix = static::_getTablePrefix(); $databaseAdapter = static::_getDatabaseAdapter(); if (Moto\Website\Settings::isExists('yandex_metrica_counter')) { $data = Moto\Website\Settings::get('yandex_metrica_counter'); if (is_string($data)) { Moto\System\Log::info('@UPDATE 40 : yandex_metrica_counter converting ...'); $sql = 'UPDATE `' . $prefix . 'settings` SET `type` = "object" WHERE `name` = "website.yandex_metrica_counter"'; $databaseAdapter->query($sql)->execute(); Moto\Website\Settings::loadData(true); Moto\System\Log::info('@UPDATE 40 : yandex_metrica_counter converted'); } } else { Moto\System\Log::info('@UPDATE 40 : yandex_metrica_counter updating...'); $counterId = trim(Moto\Website\Settings::get('yandex_metrica_counter_id', '')); Moto\System\Log::info('@UPDATE 40 : yandex_metrica_counter old value : ' . $counterId); $sql = 'UPDATE `' . $prefix . 'settings` SET `type` = "object", `name` = "website.yandex_metrica_counter", `value` = "{}" WHERE `name` = "website.yandex_metrica_counter_id"'; $databaseAdapter->query($sql)->execute(); Moto\Website\Settings::loadData(true); Moto\Website\Settings::set('yandex_metrica_counter', array('id' => $counterId, 'webvisor' => false, 'track_hash' => false)); Moto\Website\Settings::loadData(true); Moto\System\Log::info('@UPDATE 40 : yandex_metrica_counter updated'); } Moto\System\Log::info('@UPDATE 40 : Done'); } protected static function updateTo_42_Build() { Moto\System\Log::info('@UPDATE 42 : Start'); $prefix = static::_getTablePrefix(); $databaseAdapter = static::_getDatabaseAdapter(); $sql = '
                UPDATE `settings` SET `type` = "object" WHERE `name` = "website.yandex_metrica_counter";
                UPDATE `settings` SET `value` = "{}" WHERE `name` = "website.yandex_metrica_counter" AND `value` = "";
                ALTER TABLE `content_blocks` CHANGE `modified` `modified` DATETIME NOT NULL DEFAULT "2015-01-01 00:00:01", CHANGE `created` `created` DATETIME NOT NULL DEFAULT "2015-01-01 00:00:01";
                ALTER TABLE `fonts` CHANGE `modified` `modified` DATETIME NOT NULL DEFAULT "2015-01-01 00:00:01", CHANGE `created` `created` DATETIME NOT NULL DEFAULT "2015-01-01 00:00:01";
                ALTER TABLE `languages` CHANGE `created` `created` DATETIME NOT NULL DEFAULT "2015-01-01 00:00:01";
                ALTER TABLE `media_folders` CHANGE `modified` `modified` DATETIME NOT NULL DEFAULT "2015-01-01 00:00:01", CHANGE `created` `created` DATETIME NOT NULL DEFAULT "2015-01-01 00:00:01";
                ALTER TABLE `media_items` CHANGE `modified` `modified` DATETIME NOT NULL DEFAULT "2015-01-01 00:00:01", CHANGE `created` `created` DATETIME NOT NULL DEFAULT "2015-01-01 00:00:01";
                ALTER TABLE `menus` CHANGE `modified` `modified` DATETIME NOT NULL DEFAULT "2015-01-01 00:00:01", CHANGE `created` `created` DATETIME NOT NULL DEFAULT "2015-01-01 00:00:01";
                ALTER TABLE `menu_items` CHANGE `modified` `modified` DATETIME NOT NULL DEFAULT "2015-01-01 00:00:01", CHANGE `created` `created` DATETIME NOT NULL DEFAULT "2015-01-01 00:00:01";
                ALTER TABLE `pages` CHANGE `published` `published` DATETIME NOT NULL DEFAULT "2015-01-01 00:00:01", CHANGE `modified` `modified` DATETIME NOT NULL DEFAULT "2015-01-01 00:00:01", CHANGE `created` `created` DATETIME NOT NULL DEFAULT "2015-01-01 00:00:01";
                ALTER TABLE `roles` CHANGE `created` `created` DATETIME NOT NULL DEFAULT "2015-01-01 00:00:01";
                ALTER TABLE `styles` CHANGE `modified` `modified` DATETIME NOT NULL DEFAULT "2015-01-01 00:00:01", CHANGE `created` `created` DATETIME NOT NULL DEFAULT "2015-01-01 00:00:01";
                ALTER TABLE `users` CHANGE `created` `created` DATETIME NOT NULL DEFAULT "2015-01-01 00:00:01";
                ALTER TABLE `presets` CHANGE `modified` `modified` DATETIME NOT NULL DEFAULT "2015-01-01 00:00:01", CHANGE `created` `created` DATETIME NOT NULL DEFAULT "2015-01-01 00:00:01";
        '; try { $parser = new Moto\Sql\Parser(); $parser->setTablePrefix($prefix); $queries = $parser->explodeSQL($sql); if (is_array($queries)) { foreach ($queries as $query) { if (empty($query['sql'])) { continue; } $databaseAdapter->query($query['sql'])->execute(); } } } catch(\Exception $e) { Moto\System\Log::critical('@UPDATE 42 : DB Query : ' . $e->getMessage()); throw new \Exception('CANT_UPGRADE'); } Moto\Website\Settings::loadData(true); Moto\System\Log::info('@UPDATE 42 : Done'); return true; } protected static function _compressContainers($params) { $result = array( 'removed' => 0, 'type' => '', ); $isDebug = Moto\Util::getFrom($params, 'isDebug', false); if ($isDebug) { Moto\System\Log::debug(__FUNCTION__ . ': params ', $params); } $type = Moto\Util::getFrom($params, 'type'); if (!in_array($type, array('header', 'content', 'footer'))) { if ($isDebug) { Moto\System\Log::debug(__FUNCTION__ . ': Unknown type ' . $type); } $result['isError'] = true; $result['error'] = 'UNKNOWN_TYPE'; return $result; } if ($isDebug) { Moto\System\Log::debug(__FUNCTION__ . ': type ' . $type); } $table = new Moto\Application\Styles\StylesTable(); $select = new Zend\Db\Sql\Select($table->getTable()); $select->columns(array('id', 'class_name')); $select->where(array( 'type' => 'widget', 'is_system' => 0, )); $select->where(new Zend\Db\Sql\Predicate\Like('class_name', 'moto-container_' . $type . '_%')); $statement = $table->getSql()->prepareStatementForSqlObject($select); $collection = $statement->execute(); if ($isDebug) { Moto\System\Log::debug(__FUNCTION__ . ': Founded ' . $collection->count() . ' container(s)'); } if ($collection->count() < Moto\Util::getFrom($params, 'minimum', 0)) { if ($isDebug) { Moto\System\Log::debug(__FUNCTION__ . ': Skipped low containers'); } $result['isError'] = true; $result['error'] = 'IGNORE_BY_MINIMUM_CONTAINERS'; return $result; } $allContainers = array(); foreach($collection as $item) { $allContainers[] = $item['class_name']; } $where = null; switch($type) { case 'content': $contentTable = new Moto\Application\Pages\PagesTable(); break; default: $contentTable = new Moto\Application\Content\Table\ContentBlocks(); $where = array( 'type' => $type, ); break; } $contentTable->useResultAsModel(false); $items = $contentTable->select($where); foreach ($items as $item) { if (empty($item->content)) { continue; } $containers = Moto\Application\Content\Util::findContainers(trim($item->content)); if (empty($containers)) { continue; } $allContainers = array_diff($allContainers, $containers); } if (count($allContainers)) { $result['removed'] = count($allContainers); $table = new Moto\Application\Styles\StylesTable(); if ($isDebug) { Moto\System\Log::info(__FUNCTION__ . ': Removing ' . count($allContainers) . ' containers'); } $allContainers = array_values($allContainers); $table->deleteByClassName($allContainers); } elseif ($isDebug) { Moto\System\Log::info(__FUNCTION__ . ': Nothing to remove'); } return $result; } public static function updateTo_43_Build() { Moto\System\Log::info('@UPDATE 43 : Start'); $params = array('type' => 'header'); if (method_exists('Moto\System', 'isDevelopmentStage') && Moto\System::isDevelopmentStage()) { $params['isDebug'] = true; } static::_compressContainers($params); Moto\System\Log::info('@UPDATE 43 : Done'); Moto\System\Settings::set('build', 43); return true; } public static function checkAndCreateAudioPlayerPreset() { $table = new Moto\Application\Presets\PresetsTable(); $table->useResultAsModel(true); $preset = $table->getWidgetPreset('audio_player', 'moto-preset-default'); if (!$preset) { $preset = $table->create(array( 'name' => 'Preset 1', 'widget_name' => 'audio_player', 'class_name' => 'moto-preset-default', 'is_system' => 1, 'is_responsive' => 0, 'properties' => '{"widget_container":{"desktop":{"base":{"font-family":"tahoma, arial, helvetica, sans-serif","font-weight":"400","font-style":"normal","color":"#81868c","background-color":"#ffffff","font-size":"12px","border-color":"#d3d8db"}}},"buttons_normal":{"desktop":{"base":{"before":{"color":"#d3d8db"},"background-color":"transparent"},"hover":{"before":{"color":"#7f878a"},"background-color":""}}},"buttons_active":{"desktop":{"base":{"background-color":"#d3d8db","before":{"color":"#55616d"}},"hover":{"background-color":"","before":{"color":""}}}},"progress_bar":{"desktop":{"base":{"background-color":"#7f878a"}}},"volume_bar":{"desktop":{"base":{"background-color":"#7f878a"}}}}', 'template' => 'default', )); try { if ($table->save($preset)) { Moto\System\Log::info('Audio player preset saved'); } else { Moto\System\Log::info('Audio player preset not saved'); } } catch (\Exception $e) { Moto\System\Log::info('Audio player preset not saved. Exception:', $e); } } else { Moto\System\Log::info('Audio player preset already exist.'); } } public static function checkAndCreateCountdownPresets() { $table = new Moto\Application\Presets\PresetsTable(); $table->useResultAsModel(true); $preset = $table->getWidgetPreset('countdown', 'moto-preset-default'); if (!$preset) { $preset = $table->create(array( 'name' => 'Preset 1', 'widget_name' => 'countdown', 'class_name' => 'moto-preset-default', 'is_system' => 1, 'is_responsive' => 0, 'properties' => '{"general":{"desktop":{"base":{"font-family":"tahoma, arial, helvetica, sans-serif","font-weight":"400","font-style":"normal","color":"#81868c","background-color":"#d3d8db","font-size":"12px","height":"80px","width":"80px"}}},"delimiter":{"desktop":{"base":{"min-width":"20px","font-size":"22px","color":"#d3d8db"}}},"text":{"desktop":{"base":{"color":"#81868c","font-style":"normal","font-weight":"400","font-size":"13px"}}},"digits":{"desktop":{"base":{"color":"#2e3a46","font-style":"normal","font-weight":"400","font-size":"30px"}}},"border":{"desktop":{"base":{"border-color":"","border-top-width":"0px","border-left-width":"0px","border-right-width":"0px","border-bottom-width":"0px","border-style":"none","border-radius":"40px"}}}}', 'template' => 'default' )); try { $table->save($preset); } catch (\Exception $e) { Moto\System\Log::info('Countdown preset 1 not saved. Exception:', $e); } } $preset = $table->getWidgetPreset('countdown', 'moto-preset-2'); if (!$preset) { $preset = $table->create(array( 'name' => 'Preset 2', 'widget_name' => 'countdown', 'class_name' => 'moto-preset-2', 'is_system' => 1, 'is_responsive' => 0, 'properties' => '{"general":{"desktop":{"base":{"font-family":"tahoma, arial, helvetica, sans-serif","font-weight":"400","font-style":"normal","color":"#81868c","background-color":"#d3d8db","font-size":"12px","height":"80px","width":"80px"}}},"delimiter":{"desktop":{"base":{"min-width":"20px","font-size":"22px","color":"#d3d8db"}}},"text":{"desktop":{"base":{"color":"#81868c","font-style":"normal","font-weight":"400","font-size":"14px"}}},"digits":{"desktop":{"base":{"color":"#2e3a46","font-style":"normal","font-weight":"400","font-size":"30px"}}},"border":{"desktop":{"base":{"border-color":"","border-top-width":"0px","border-left-width":"0px","border-right-width":"0px","border-bottom-width":"0px","border-style":"none","border-radius":"0px"}}}}', 'template' => 'default' )); try { $table->save($preset); } catch (\Exception $e) { Moto\System\Log::info('Countdown preset 2 not saved. Exception:', $e); } } $preset = $table->getWidgetPreset('countdown', 'moto-preset-3'); if (!$preset) { $preset = $table->create(array( 'name' => 'Preset 3', 'widget_name' => 'countdown', 'class_name' => 'moto-preset-3', 'is_system' => 1, 'is_responsive' => 0, 'properties' => '{"general":{"desktop":{"base":{"font-family":"tahoma, arial, helvetica, sans-serif","font-weight":"400","font-style":"normal","color":"#81868c","background-color":"","font-size":"12px","height":"80px","width":"80px"}}},"delimiter":{"desktop":{"base":{"min-width":"20px","font-size":"30px","color":"#81868c"}}},"text":{"desktop":{"base":{"color":"#81868c","font-style":"normal","font-weight":"400","font-size":"13px"}}},"digits":{"desktop":{"base":{"color":"#2e3a46","font-style":"normal","font-weight":"400","font-size":"30px"}}},"border":{"desktop":{"base":{"border-color":"#81868c","border-top-width":"3px","border-left-width":"3px","border-right-width":"3px","border-bottom-width":"3px","border-style":"solid","border-radius":"40px"}}}}', 'template' => 'default' )); try { $table->save($preset); } catch (\Exception $e) { Moto\System\Log::info('Countdown preset 3 not saved. Exception:', $e); } } } public static function updateTo_44_Build() { Moto\System\Log::info('@UPDATE 44 : Start'); $params = array('type' => 'footer'); if (method_exists('Moto\System', 'isDevelopmentStage') && Moto\System::isDevelopmentStage()) { $params['isDebug'] = true; } static::_compressContainers($params); if (class_exists('Moto\System\Brand')) { $brand = Moto\System\Brand::getInstance(); if (method_exists($brand, 'getUpdatedBrandInfo')) { Moto\System\Log::info('@UPDATE 44 : Update Brand Data'); $brand->getUpdatedBrandInfo(); } } Moto\System\Log::info('@UPDATE 44 : Check and create audio player preset'); static::checkAndCreateAudioPlayerPreset(); Moto\System\Log::info('@UPDATE 44 : Done'); Moto\System\Settings::set('build', 44); return true; } public static function updateTo_45_Build() { Moto\System\Log::info('@UPDATE 45 : Start'); $params = array('type' => 'content'); if (method_exists('Moto\System', 'isDevelopmentStage') && Moto\System::isDevelopmentStage()) { $params['isDebug'] = true; } static::_compressContainers($params); Moto\System\Log::info('@UPDATE 45 :  Add Japanese language'); $table = new Moto\Application\Languages\LanguagesTable(); $language = $table->getByCode('ja'); if (!$language) { $language = $table->create(array( 'code' => 'ja', 'name' => '日本語' )); $table->save($language); } Moto\System\Log::info('@UPDATE 45 : Done'); Moto\System\Settings::set('build', 45); return true; } public static function updateTo_46_Build() { Moto\System\Log::info('@UPDATE 46 : Start'); Moto\System\Log::info('@UPDATE 46 :  Add Svenska language'); $table = new Moto\Application\Languages\LanguagesTable(); $language = $table->getByCode('sv'); if (!$language) { $language = $table->create(array( 'code' => 'sv', 'name' => 'Svenska' )); $table->save($language); } Moto\System\Log::info('@UPDATE 46 : Done'); Moto\System\Settings::set('build', 46); return true; } public static function updateTo_47_Build() { Moto\System\Log::info('@UPDATE 47 : Start'); $prefix = static::_getTablePrefix(); $databaseAdapter = static::_getDatabaseAdapter(); try { $sql = "SHOW COLUMNS FROM `{$prefix}media_items` WHERE `Field` = 'is_protected'"; $isExists = $databaseAdapter->query($sql)->execute()->current(); if ($isExists) { Moto\System\Log::notice('@UPDATE 47 : DataBase : field media_items.is_protected already exists'); } else { Moto\System\Log::info('@UPDATE 47 : DataBase : add field media_items.is_protected'); $sql = "ALTER TABLE `{$prefix}media_items` ADD `is_protected` TINYINT( 1 ) UNSIGNED NOT NULL DEFAULT '0' AFTER `author_id`"; $databaseAdapter->query($sql)->execute(); } } catch (\Exception $e) { Moto\System\Log::critical('@UPDATE 47 : DataBase : ' . $e->getMessage()); throw $e; } Moto\System\Log::info('@UPDATE 47 : Add Italiano language'); $table = new Moto\Application\Languages\LanguagesTable(); $language = $table->getByCode('it'); if (!$language) { $language = $table->create(array( 'code' => 'it', 'name' => 'Italiano' )); $table->save($language); } Moto\System\Log::info('@UPDATE 47 : Add Nederlands language'); $table = new Moto\Application\Languages\LanguagesTable(); $language = $table->getByCode('nl'); if (!$language) { $language = $table->create(array( 'code' => 'nl', 'name' => 'Nederlands' )); $table->save($language); } Moto\System\Log::info('@UPDATE 47 : Done'); Moto\System\Settings::set('build', 47); return true; } public static function checkAndCreatePasswordProtectedPage() { if(Moto\Website\Settings::get('password_protected_page_id')){ return; } $pageTable = new Moto\Application\Pages\PagesTable(); $url = 'password-protected'; $receivedUrl = $url; for ($index = 1; $index < 1000; $index++) { $page = $pageTable->getByUrl($receivedUrl); if (!$page) { $page = Moto\Application\Pages\Service::save(array( 'name' => 'Password Protected', 'url' => $receivedUrl )); $page->is_system = 1; $page->status = Moto\Application\Pages\PageModel::STATUS_PUBLISH; $page->properties = '{"meta":{"noindex":true}}'; $page->content = '<div class="moto-widget moto-widget-row row-fixed" data-widget="row"><div class="container-fluid"><div class="row"><div class="moto-cell col-sm-12" data-container="container">{{ widget("auth_form", {"preset":"default","spacing":{"top":"large","right":"auto","bottom":"large","left":"auto"},"fields":{"password":{"enabled":true,"required":true,"type":"text","placeholder":"Password"}},"messages":{"required":"Field is required","wrong_password":"Wrong password","error":"Server unavailable. Please try again."},"buttons":{"submit":{"preset":"default","size":"medium","align":"left","label":"OK"}},"settings":[]}) }}</div></div></div></div>'; $pageTable->save($page); Moto\Website\Settings::add('password_protected_page_id', $page->id); Moto\System\Log::info('Password protected page created'); break; } $receivedUrl = $url . '-' . ($index + 1); } } public static function checkAndCreateUnderConstructionPage() { if(Moto\Website\Settings::get('under_construction')){ return; } $pageTable = new Moto\Application\Pages\PagesTable(); $url = 'under-construction'; $receivedUrl = $url; for ($index = 1; $index < 1000; $index++) { $page = $pageTable->getByUrl($receivedUrl); if (!$page) { $page = Moto\Application\Pages\Service::save(array( 'name' => 'Under Construction', 'url' => $receivedUrl )); $page->is_system = 1; $page->status = Moto\Application\Pages\PageModel::STATUS_PUBLISH; $page->properties = '{"meta":{"noindex":true}}'; $page->layout = '{"name":"default","sections":{"header":{"id":1,"visible":false},"footer":{"id":2,"visible":false}}}'; $page->content = '<div class="moto-widget moto-widget-row row-fixed" data-widget="row"><div class="container-fluid"><div class="row"><div class="moto-cell col-sm-12" data-container="container"><div class="moto-widget moto-widget-text moto-preset-default moto-spacing-top-large moto-spacing-right-auto moto-spacing-bottom-large moto-spacing-left-auto" data-widget="text" data-preset="default" data-spacing="lala"><div class="moto-widget-text-content moto-widget-text-editable"><p class="moto-text_system_4" style="text-align: center;">Under Construction</p></div></div></div></div></div></div>'; $pageTable->save($page); Moto\Website\Settings::add('under_construction', '{"enabled":false, "page_id":' . $page->id . '}', 'object'); Moto\System\Log::info('Under construction page created'); break; } $receivedUrl = $url . '-' . ($index + 1); } } public static function updateTo_48_Build() { Moto\System\Log::info('@UPDATE 48 : Start'); Moto\System\Log::info('@UPDATE 48 : Add website.password_protection'); Moto\Website\Settings::add('password_protection', '{"enabled":false}', 'object'); Moto\System\Log::info('@UPDATE 48 : Check and create password protected page'); static::checkAndCreatePasswordProtectedPage(); Moto\System\Log::info('@UPDATE 48 : Check and create under construction page'); static::checkAndCreateUnderConstructionPage(); Moto\System\Log::info('@UPDATE 48 : Done'); Moto\System\Settings::set('build', 48); return true; } public static function updateTo_49_Build() { Moto\System\Log::info('@UPDATE 49 : Start'); Moto\System\Log::info('@UPDATE 49 : Add system.engine'); $systemEngine = Moto\System\Settings::get('engine'); if (!$systemEngine) { if (method_exists('Moto\Util', 'encrypt')) { Moto\System\Settings::set('engine', Moto\Util::encrypt('{"type":"WebsiteBuilder","version":1}', Moto\Config::get('__product_id__'))); } else { throw new \Exception('CANT_UPGRADE'); } } Moto\System\Log::info('@UPDATE 49 : Done'); Moto\System\Settings::set('build', 49); return true; } public static function updateTo_50_Build() { Moto\System\Log::info('@UPDATE 50 : Start'); Moto\System\Log::info('@UPDATE 50 : Add Українська language'); $table = new Moto\Application\Languages\LanguagesTable(); $language = $table->getByCode('uk'); if (!$language) { $language = $table->create(array( 'code' => 'uk', 'name' => 'Українська' )); $table->save($language); } Moto\System\Log::info('@UPDATE 50 : Done'); Moto\System\Settings::set('build', 50); return true; } public static function updateTo_52_Build() { Moto\System\Log::info('@UPDATE 52 : Start'); Moto\System\Log::info('@UPDATE 52 : Check and create countdown preset'); static::checkAndCreateCountdownPresets(); Moto\System\Log::info('@UPDATE 52 : Done'); Moto\System\Settings::set('build', 52); return true; } public static function updateTo_57_Build() { Moto\System\Log::info('@UPDATE 57 : Start'); Moto\System\Log::info('@UPDATE 57 : Add Français language'); $table = new Moto\Application\Languages\LanguagesTable(); $language = $table->getByCode('fr'); if (!$language) { $language = $table->create(array( 'code' => 'fr', 'name' => 'Français' )); $table->save($language); } Moto\System\Log::info('@UPDATE 57 : Add Polski language'); $language = $table->getByCode('pl'); if (!$language) { $language = $table->create(array( 'code' => 'pl', 'name' => 'Polski' )); $table->save($language); } $newPaths = array( '@websiteStorageDir' => '@website/mt-content/storage/website', '@pluginsStorageDir' => '@website/mt-content/storage/plugins', '@pluginsTempDir' => '@website/mt-content/temp/plugins', ); foreach($newPaths as $pathName => $fallbackPath) { $newFolder = Moto\System::getAbsolutePath($pathName); if (empty($newFolder)) { $newFolder = Moto\System::getAbsolutePath($fallbackPath); } if (!empty($newFolder) && !is_dir($newFolder)) { Moto\Util::createDir($newFolder); } if (!is_file($newFolder . '/index.html')) { Moto\Util::filePutContents($newFolder . '/index.html', '<!DOCTYPE html><head><meta http-equiv="refresh" content="0; url=../" /></head><body></body>'); } } Moto\System\Log::info('@UPDATE 57 : Done'); Moto\System\Settings::set('build', 57); return true; } public static function updateTo_59_Build() { Moto\System\Log::info('@UPDATE 59 : Start'); Moto\Website\Settings::loadData(true); if (!Moto\Website\Settings::isExists('maintenance_mode')) { Moto\System\Log::info('@UPDATE 59 : Add website.maintenance_mode'); Moto\Website\Settings::add('maintenance_mode', json_encode(array('message' => 'The website is currently down for maintenance. We will be back soon!')), 'object'); } Moto\Website\Settings::loadData(true); Moto\System\Log::info('@UPDATE 59 : Done'); Moto\System\Settings::set('build', 59); } public static function checkAndCreateAccordionPresets() { $table = new Moto\Application\Presets\PresetsTable(); $table->useResultAsModel(true); $preset = $table->getWidgetPreset('accordion', 'moto-preset-default'); if (!$preset) { $preset = $table->create(array( 'name' => 'Preset 1', 'widget_name' => 'accordion', 'class_name' => 'moto-preset-default', 'is_system' => 1, 'is_responsive' => 0, 'properties' => '{"collapse_icon":{"desktop":{"base":{"before":{"content":{"id":"angle-right","provider":"FontAwesome","unicode":"f105"}},"color":"#80868b","font-size":"20px"},"hover":{"color":"#54616d"}},"mobile-h":{"base":{"font-size":""}},"mobile-v":{"base":{"font-size":""}},"tablet":{"base":{"font-size":""}}},"collapse_icon_opened":{"desktop":{"base":{"before":{"content":{"id":"angle-down","provider":"FontAwesome","unicode":"f107"}},"color":"#54616d"},"hover":{"color":""}}},"content_opened":{"desktop":{"base":{"background-color":"transparent","border-bottom-width":"0px","border-right-width":"0px","border-left-width":"0px","border-top-width":"0px","border-color":"transparent","border-radius":"0px","border-style":"none"},"hover":{}}},"header":{"desktop":{"base":{"background-color":"transparent","border-bottom-width":"0px","border-right-width":"0px","border-left-width":"0px","border-top-width":"0px","border-color":"transparent","border-radius":"0px","border-style":"none","color":"#80868b","font-family":"tahoma, arial, helvetica, sans-serif","font-size":"18px","font-style":"normal","font-weight":"400"},"hover":{"background-color":"","border-color":"","color":"#54616d"}},"mobile-h":{"base":{"font-size":""}},"mobile-v":{"base":{"font-size":""}},"tablet":{"base":{"font-size":""}}},"header_icon":{"desktop":{"base":{"color":"#80868b","font-size":"20px"},"hover":{"color":"#54616d"}},"mobile-h":{"base":{"font-size":""}},"mobile-v":{"base":{"font-size":""}},"tablet":{"base":{"font-size":""}}},"header_icon_opened":{"desktop":{"base":{"color":"#80868b"},"hover":{"color":"#54616d"}}},"header_opened":{"desktop":{"base":{"background-color":"transparent","border-bottom-width":"0px","border-right-width":"0px","border-left-width":"0px","border-top-width":"0px","border-color":"transparent","border-radius":"0px","border-style":"none","color":"#54616d"},"hover":{"border-color":"","color":""}}},"header_title":{"desktop":{"base":{"text-decoration":"none"},"hover":{"text-decoration":""}}},"header_title_opened":{"desktop":{"base":{"text-decoration":"none"},"hover":{"text-decoration":""}}},"item":{"desktop":{"base":{"border-bottom-width":"1px","border-right-width":"0px","border-left-width":"0px","border-top-width":"0px","border-color":"#d3d8db","border-radius":"0px","border-style":"solid","margin-bottom":"0px"},"hover":{"border-color":""}}},"item_opened":{"desktop":{"base":{"border-bottom-width":"1px","border-right-width":"0px","border-left-width":"0px","border-top-width":"0px","border-color":"#d3d8db","border-radius":"0px","border-style":"solid"},"hover":{}}}}', 'template' => 'default' )); try { $table->save($preset); } catch (\Exception $e) { Moto\System\Log::info('Accordion preset 1 not saved. Exception:', $e); } } $preset = $table->getWidgetPreset('accordion', 'moto-preset-2'); if (!$preset) { $preset = $table->create(array( 'name' => 'Preset 2', 'widget_name' => 'accordion', 'class_name' => 'moto-preset-2', 'is_system' => 1, 'is_responsive' => 0, 'properties' => '{"collapse_icon":{"desktop":{"base":{"before":{"content":{"id":"plus","provider":"FontAwesome","unicode":"f067"}},"color":"#80868b","font-size":"14px"},"hover":{"color":"#54616d"}},"mobile-h":{"base":{"font-size":""}},"mobile-v":{"base":{"font-size":""}},"tablet":{"base":{"font-size":""}}},"collapse_icon_opened":{"desktop":{"base":{"before":{"content":{"id":"times","provider":"FontAwesome","unicode":"f00d"}},"color":"#54616d"},"hover":{"color":""}}},"content_opened":{"desktop":{"base":{"background-color":"#ffffff","border-bottom-width":"0px","border-right-width":"0px","border-left-width":"0px","border-top-width":"0px","border-color":"transparent","border-radius":"0px","border-style":"none"},"hover":{"background-color":""}}},"header":{"desktop":{"base":{"background-color":"#ffffff","border-color":"transparent","border-bottom-width":"0px","border-right-width":"0px","border-left-width":"0px","border-top-width":"0px","border-radius":"0px","border-style":"none","color":"#80868b","font-family":"tahoma, arial, helvetica, sans-serif","font-size":"18px","font-style":"normal","font-weight":"400"},"hover":{"background-color":"#ffffff","border-color":"","color":"#54616d"}},"mobile-h":{"base":{"font-size":""}},"mobile-v":{"base":{"font-size":""}},"tablet":{"base":{"font-size":""}}},"header_icon":{"desktop":{"base":{"color":"#80868b","font-size":"20px"},"hover":{"color":"#54616d"}},"mobile-h":{"base":{"font-size":""}},"mobile-v":{"base":{"font-size":""}},"tablet":{"base":{"font-size":""}}},"header_icon_opened":{"desktop":{"base":{"color":"#54616d"},"hover":{}}},"header_opened":{"desktop":{"base":{"background-color":"#ffffff","border-bottom-width":"0px","border-right-width":"0px","border-left-width":"0px","border-top-width":"0px","border-color":"transparent","border-radius":"0px","border-style":"none","color":"#54616d"},"hover":{"border-color":"","color":"#80868b"}}},"header_title":{"desktop":{"base":{"text-decoration":"none"},"hover":{"text-decoration":""}}},"header_title_opened":{"desktop":{"base":{"text-decoration":"none"},"hover":{"text-decoration":""}}},"item":{"desktop":{"base":{"border-bottom-width":"1px","border-color":"#d3d8db","border-left-width":"1px","border-radius":"0px","border-right-width":"1px","border-style":"solid","border-top-width":"1px","margin-bottom":"10px"},"hover":{"border-color":""}}},"item_opened":{"desktop":{"base":{"border-bottom-width":"1px","border-color":"#54616d","border-left-width":"1px","border-radius":"0px","border-right-width":"1px","border-style":"solid","border-top-width":"1px"},"hover":{}}}}', 'template' => 'default' )); try { $table->save($preset); } catch (\Exception $e) { Moto\System\Log::info('Accordion preset 2 not saved. Exception:', $e); } } $preset = $table->getWidgetPreset('accordion', 'moto-preset-3'); if (!$preset) { $preset = $table->create(array( 'name' => 'Preset 3', 'widget_name' => 'accordion', 'class_name' => 'moto-preset-3', 'is_system' => 1, 'is_responsive' => 0, 'properties' => '{"collapse_icon":{"desktop":{"base":{"before":{"content":{"id":"angle-right","provider":"FontAwesome","unicode":"f105"}},"color":"#80868b","font-size":"12px"},"hover":{"color":"#ffffff"}},"mobile-h":{"base":{"font-size":""}},"mobile-v":{"base":{"font-size":""}},"tablet":{"base":{"font-size":""}}},"collapse_icon_opened":{"desktop":{"base":{"before":{"content":{"id":"angle-down","provider":"FontAwesome","unicode":"f107"}},"color":"#ffffff"},"hover":{"color":""}}},"content_opened":{"desktop":{"base":{"background-color":"#ffffff","border-bottom-width":"0px","border-right-width":"0px","border-left-width":"0px","border-top-width":"0px","border-color":"transparent","border-radius":"0px","border-style":"none"},"hover":{}}},"header":{"desktop":{"base":{"background-color":"#d3d8db","border-bottom-width":"0px","border-color":"transparent","border-left-width":"0px","border-radius":"0px","border-right-width":"0px","border-style":"none","border-top-width":"0px","color":"#54616d","font-family":"tahoma, arial, helvetica, sans-serif","font-size":"18px","font-style":"normal","font-weight":"400"},"hover":{"background-color":"#54616d","border-color":"","color":"#ffffff"}},"mobile-h":{"base":{"font-size":""}},"mobile-v":{"base":{"font-size":""}},"tablet":{"base":{"font-size":""}}},"header_icon":{"desktop":{"base":{"color":"#54616d","font-size":"20px"},"hover":{"color":"#ffffff"}},"mobile-h":{"base":{"font-size":""}},"mobile-v":{"base":{"font-size":""}},"tablet":{"base":{"font-size":""}}},"header_icon_opened":{"desktop":{"base":{"color":"#ffffff"},"hover":{}}},"header_opened":{"desktop":{"base":{"background-color":"#54616d","border-bottom-width":"0px","border-right-width":"0px","border-left-width":"0px","border-top-width":"0px","border-color":"transparent","border-radius":"0px","border-style":"none","color":"#ffffff"},"hover":{"background-color":"#54616d","border-color":"","color":""}}},"header_title":{"desktop":{"base":{"text-decoration":"none"},"hover":{"text-decoration":""}}},"header_title_opened":{"desktop":{"base":{"text-decoration":"none"},"hover":{"text-decoration":""}}},"item":{"desktop":{"base":{"border-bottom-width":"0px","border-color":"transparent","border-left-width":"0px","border-radius":"0px","border-right-width":"0px","border-style":"none","border-top-width":"0px","margin-bottom":"5px"},"hover":{"border-color":""}}},"item_opened":{"desktop":{"base":{"border-bottom-width":"0px","border-right-width":"0px","border-left-width":"0px","border-top-width":"0px","border-color":"transparent","border-radius":"0px","border-style":"none"},"hover":{}}}}', 'template' => 'default' )); try { $table->save($preset); } catch (\Exception $e) { Moto\System\Log::info('Accordion preset 3 not saved. Exception:', $e); } } } public static function updateTo_60_Build() { Moto\System\Log::info('@UPDATE 60 : Start'); Moto\System\Log::info('@UPDATE 60 : Check and create accordion preset'); static::checkAndCreateAccordionPresets(); Moto\System\Log::info('@UPDATE 60 : Done'); static::saveCurrentBuild(); } public static function updateTo_61_Build() { Moto\System\Log::info('@UPDATE 61 : Start'); Moto\System\Log::info('@UPDATE 61 : Add Español language'); $table = new Moto\Application\Languages\LanguagesTable(); $language = $table->getByCode('es'); if (!$language) { $language = $table->create(array( 'code' => 'es', 'name' => 'Español' )); $table->save($language); } Moto\System\Log::info('@UPDATE 61 : Add setting website.widget_embed_execution'); Moto\Website\Settings::add('widget_embed_execution', 1, 'bool'); try { $prefix = self::_getTablePrefix(); $databaseAdapter = self::_getDatabaseAdapter(); $sql = 'UPDATE `' . $prefix . 'settings` SET `type` = "bool" WHERE `name` IN ("website.widget_embed_execution")'; $databaseAdapter->query($sql)->execute(); } catch (\Exception $e) { throw new \Exception('CANT_UPGRADE'); } Moto\System\Log::info('@UPDATE 61 : Done'); } public static function updateTo_62_Build() { Moto\System\Log::info('@UPDATE 62 : Start'); $prefix = static::_getTablePrefix(); $databaseAdapter = Moto\System::getDatabaseAdapter(); try { $sql = "SHOW COLUMNS FROM `{$prefix}fonts` WHERE `Field` = 'is_protected'"; $isExists = $databaseAdapter->query($sql)->execute()->current(); if ($isExists) { Moto\System\Log::notice('@UPDATE 62 : DataBase : field fonts.is_protected already exists'); } else { Moto\System\Log::info('@UPDATE 62 : DataBase : add field fonts.is_protected'); $sql = "ALTER TABLE `{$prefix}fonts` ADD `is_protected` TINYINT( 1 ) UNSIGNED NOT NULL DEFAULT '0' AFTER `active`"; $databaseAdapter->query($sql)->execute(); } } catch (\Exception $e) { Moto\System\Log::critical('@UPDATE 62 : DataBase : ' . $e->getMessage()); throw $e; } $theme = Moto\Website\Settings::get('theme'); if ($theme) { Moto\Website\Theme::importFonts($theme); } try { $languagesTable = new Moto\Application\Languages\LanguagesTable(); $sql = "SHOW COLUMNS FROM `{$prefix}languages` WHERE `Field` = 'locale'"; $isLocaleExists = $databaseAdapter->query($sql)->execute()->current(); if (!$isLocaleExists) { Moto\System\Log::info('@UPDATE 62 : Locales : add `locale` column'); $sql = "ALTER TABLE `{$prefix}languages` ADD `locale` varchar(5) NOT NULL DEFAULT '' AFTER `code`"; $databaseAdapter->query($sql)->execute(); Moto\System\Log::info('@UPDATE 62 : Locales : fill `locale` column with five-character values'); $locales = array('en_US', 'ru_RU', 'de_DE', 'ja_JP', 'sv_SE', 'it_IT', 'nl_NL', 'uk_UA', 'fr_FR', 'pl_PL', 'es_ES'); foreach($locales as $locale) { $code = substr($locale, 0, 2); $languageRecord = $languagesTable->getByCode($code); if (!$languageRecord) { continue; } $languageRecord->locale = $locale; $languagesTable->save($languageRecord); } } if (!Moto\Website\Settings::isExists('language_locale')) { Moto\System\Log::info('@UPDATE 62 : Locales : add `language_locale` website setting'); $languageId = Moto\Website\Settings::get('language_id'); $websiteLanguageRecord = $languagesTable->getById($languageId); Moto\Website\Settings::add('language_locale', $websiteLanguageRecord->locale, 'string'); } } catch (\Exception $exception) { Moto\System\Log::critical('@UPDATE 62 : Locales : ' . $exception->getMessage()); throw $exception; } Moto\System\Log::info('@UPDATE 62 : Add "Português (Brasil)" language'); $table = new Moto\Application\Languages\LanguagesTable(); $language = $table->getByLocale('pt_BR'); if (!$language) { $language = $table->create(array( 'code' => 'pt', 'locale' => 'pt_BR', 'name' => 'Português (Brasil)' )); $table->save($language); } Moto\System\Log::info('@UPDATE 62 : Add setting website.lazy_loading'); try { Moto\Website\Settings::add('lazy_loading', '{"enabled":true}', 'object'); } catch (\Exception $exception) { Moto\System\Log::critical('@UPDATE 62 : Updating settings : ' . $exception->getMessage()); throw $exception; } Moto\System\Log::info('@UPDATE 62 : Done'); } public static function updateTo_63_Build() { Moto\System\Log::info('@UPDATE 63 : Start'); Moto\System\Log::info('@UPDATE 63 : Add setting website.seo_html_attribute_lang'); try { Moto\Website\Settings::add('seo_html_attribute_lang', 'en', 'string'); } catch (\Exception $exception) { Moto\System\Log::critical('@UPDATE 63 : Updating settings : ' . $exception->getMessage()); throw $exception; } Moto\System\Log::info('@UPDATE 63 : Done'); } public static function updateTo_64_Build() { Moto\System\Log::info('@UPDATE 64 : Start'); Moto\System\Log::info('@UPDATE 64 : Done'); } public static function updateTo_65_Build() { Moto\System\Log::info('@UPDATE 65 : Start'); static::startUpdateProductInformation(); Moto\System\Log::info('@UPDATE 65 : Done'); } public static function updateTo_66_Build() { Moto\System\Log::info('@UPDATE 66 : Start'); static::checkAndCreateSocialLinksExtendedPresets(); Moto\System\Log::info('@UPDATE 66 : Done'); } public static function checkAndCreateSocialLinksExtendedPresets() { $table = new Moto\Application\Presets\PresetsTable(); $table->useResultAsModel(true); $preset = $table->getWidgetPreset('social_links_extended', 'moto-preset-default'); if (!$preset) { $preset = $table->create(array( 'name' => 'Preset 1', 'widget_name' => 'social_links_extended', 'class_name' => 'moto-preset-default', 'is_system' => 1, 'is_responsive' => 0, 'properties' => '{"general":{"desktop":{"base":{"font-size":"26px","width":"46px","height":"46px","border-top-width":"0px","border-right-width":"0px","border-bottom-width":"0px","border-left-width":"0px","border-radius":"0px","border-style":"none","color":"#ffffff","background-color":"#2e3a46","border-color":"transparent"},"hover":{"color":"#2e3a46","background-color":"#d3d8db","border-color":"transparent"}},"tablet":{"base":{"font-size":""}}},"spacing":{"desktop":{"base":{"margin-bottom":"5px","margin-left":"5px","margin-right":"5px"}},"tablet":{"base":{"margin-left":"","margin-right":""}},"mobile-v":{"base":{"margin-bottom":""}}}}', 'template' => 'default' )); try { $table->save($preset); } catch (\Exception $e) { Moto\System\Log::info('Social Links Extended preset 1 not saved. Exception:', $e); } } $preset = $table->getWidgetPreset('social_links_extended', 'moto-preset-2'); if (!$preset) { $preset = $table->create(array( 'name' => 'Preset 2', 'widget_name' => 'social_links_extended', 'class_name' => 'moto-preset-2', 'is_system' => 1, 'is_responsive' => 0, 'properties' => '{"general":{"desktop":{"base":{"font-size":"26px","width":"46px","height":"46px","border-top-width":"2px","border-right-width":"2px","border-bottom-width":"2px","border-left-width":"2px","border-radius":"25px","border-style":"solid","color":"#55616d","background-color":"#ffffff","border-color":"#55616d"},"hover":{"color":"#d3d8db","background-color":"#2e3a46","border-color":""}},"tablet":{"base":{"font-size":""}}},"spacing":{"desktop":{"base":{"margin-bottom":"10px","margin-left":"10px","margin-right":"10px"}},"tablet":{"base":{"margin-left":"","margin-right":""}},"mobile-v":{"base":{"margin-bottom":""}}}}', 'template' => 'default' )); try { $table->save($preset); } catch (\Exception $e) { Moto\System\Log::info('Social Links Extended preset 2 not saved. Exception:', $e); } } $preset = $table->getWidgetPreset('social_links_extended', 'moto-preset-3'); if (!$preset) { $preset = $table->create(array( 'name' => 'Preset 3', 'widget_name' => 'social_links_extended', 'class_name' => 'moto-preset-3', 'is_system' => 1, 'is_responsive' => 0, 'properties' => '{"general":{"desktop":{"base":{"font-size":"20px","width":"32px","height":"32px","border-top-width":"2px","border-right-width":"2px","border-bottom-width":"2px","border-left-width":"2px","border-radius":"0px","border-style":"solid","color":"#55616d","background-color":"#d3d8db","border-color":"transparent"},"hover":{"color":"","background-color":"#ffffff","border-color":"#d3d8db"}},"tablet":{"base":{"font-size":""}}},"spacing":{"desktop":{"base":{"margin-bottom":"10px","margin-left":"10px","margin-right":"10px"}},"tablet":{"base":{"margin-left":"","margin-right":""}},"mobile-v":{"base":{"margin-bottom":""}}}}', 'template' => 'default' )); try { $table->save($preset); } catch (\Exception $e) { Moto\System\Log::info('Social Links Extended preset 3 not saved. Exception:', $e); } } } public static function updateTo_68_Build() { Moto\System\Log::info('@UPDATE 68 : Start'); Moto\Website\Settings::loadData(true); if (!Moto\Website\Settings::isExists('popup_preferences')) { Moto\System\Log::info('@UPDATE 68: Add website.popup_preferences'); Moto\Website\Settings::add('popup_preferences', json_encode(array('loading_error_message' => 'The content could not be loaded.')), 'object'); } Moto\Website\Settings::loadData(true); try { $contentSectionHelper = Moto\System\ContentSectionHelper::get('NotFoundPopup'); $contentSectionHelper->checkOrInstall(); } catch (\Exception $e) { throw new \Exception('CANT_UPGRADE'); } Moto\System\Log::info('@UPDATE 68: Update website.back_to_top_button'); static::upgradeBackToTopButton(); static::startUpdateProductInformation(); Moto\System\Log::info('@UPDATE 68 : Done'); } public static function upgradeBackToTopButton() { $table = new Moto\Application\Presets\PresetsTable(); $table->useResultAsModel(true); $preset = $table->getWidgetPreset('back_to_top', 'moto-preset-default'); if (!$preset) { $preset = $table->create(array( 'name' => 'Preset 1', 'widget_name' => 'back_to_top', 'class_name' => 'moto-preset-default', 'is_system' => 1, 'is_responsive' => 0, 'properties' => '{"position":{"type":"bottom_right","desktop":{"horizontal":"40px","vertical":"60px"},"tablet":{"horizontal":"20px","vertical":"20px"},"mobile-h":{"horizontal":"","vertical":""},"mobile-v":{"horizontal":"","vertical":""}},"common_styles":{"desktop":{"base":{"font-size":"24px","background-color":"rgba(211, 216, 219, 0.8)","color":"#2e3a46","border-color":"#ffffff","border-style":"solid","border-bottom-width":"1px","border-top-width":"1px","border-left-width":"1px","border-right-width":"1px","border-radius":"0px"},"hover":{"color":"#d3d8db","background-color":"#2e3a46","border-color":"#d3d8db"}}},"box_model":{"desktop":{"base":{"width":"48px","height":"48px"}}},"animation":"","icon":{"desktop":{"base":{"before":{"content":{"provider":"FontAwesome","id":"chevron-up","unicode":"f077"}}}}}}', 'template' => 'default' )); try { $table->save($preset); } catch (\Exception $e) { Moto\System\Log::info('Back To Top preset 1 not saved. Exception:', $e); } } try { $databaseAdapter = Moto\Config::get('databaseAdapter'); $prefix = Moto\Config::get('database.prefix'); $sql = 'UPDATE `' . $prefix . 'settings` SET `type` = "object" WHERE `name` IN ("website.back_to_top_button") AND `type` = ""'; $databaseAdapter->query($sql)->execute(); Moto\Website\Settings::loadData(true); $value = Moto\Website\Settings::get('back_to_top_button'); if (!isset($value->type)) { $value->type = 'theme'; if (!Moto\Features::isEnabled('theme_back_to_top_button') || (isset($value->enabled) && !$value->enabled)) { $value->type = 'none'; } } unset($value->enabled); Moto\Website\Settings::set('back_to_top_button', $value); } catch (\Exception $e) { return false; } return true; } public static function updateTo_NEXT_Build() { $params = array(); if (method_exists('Moto\System', 'isDevelopmentStage') && Moto\System::isDevelopmentStage()) { $params['isDebug'] = true; } $params['type'] = 'header'; static::_compressContainers($params); $params['type'] = 'content'; static::_compressContainers($params); $params['type'] = 'footer'; static::_compressContainers($params); return true; } public static function startUpdateProductInformation() { $result = Moto\Authentication\AuthenticationService::getInstance()->syncProductInformation(); if ($result['status']) { Moto\System\Log::info('@UPDATE: Product Information updated'); } else { Moto\System\Log::warning('@UPDATE: Product Information not updated because [ ' . $result['error']['code'] . ' ' . $result['error']['message'] . ' ]'); } } } 